#
# This file is derived from
#
# https://github.com/toml-lang/toml/blob/main/toml.abnf
#
########################################################################
#
# The MIT License
#
# Copyright (c) Tom Preston-Werner
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# (https://github.com/toml-lang/toml/blob/main/LICENSE)
#
##########################################################################
#
# Masatake YAMATO converted the abnf to peg for ctags.
#
##########################################################################
%prefix "ptoml"

%auxil	"struct parserCtx *"

%earlysource {
    #include "general.h"
}

%header {
	struct parserCtx;
}

%source {
#include "toml_pre.h"
}

## Overall Structure
toml <- expression ( newline expression )* newline* (!. / .)

# the order of elements is arranged for peg'ify.
expression <-
   ws keyval ws comment?
   / ws table ws comment?
   / ws comment?

## Whitespace
ws <- wschar*
wschar <- ' ' / '\t'

## Newline
newline <- '\r\n' / '\n'

## Comment
commentStartSymbol <- '#'
nonAscii <- [\u0080-\uD7FF] / [\uE000-\u110FFFF]
nonEol <- '\t' / [\u0020-\u007F] / nonAscii

comment <- commentStartSymbol nonEol*

## Key-Value pairs

keyval <- {keyvalStart(auxil, $0s);} key {keyvalKeyEnd(auxil);} keyvalSep val {keyvalValEnd(auxil);}

# the order of elements is arranged for peg'ify.
key <- dottedKey / simpleKey
simpleKey <- <quotedKey / unquotedKey> {queueKey (auxil, $0);}

unquotedKey <- ( ALPHA / DIGIT / '-' / '_' )+
quotedKey <- basicString / literalString
dottedKey <- simpleKey ( dotSep simpleKey )+

dotSep <- ws '.' ws
keyvalSep <- ws '=' ws

val <- <string / boolean / array / inlineTable / dateTime / float / integer> {notifyValue(auxil, $0, $0s);}

## String

string <- mlBasicString / basicString / mlLiteralString / literalString

## Basic String

basicString <- quotationMark basicChar* quotationMark

quotationMark <- '"'

basicChar <- basicUnescaped / escaped
basicUnescaped <- wschar / '\u0021' / [\u0023-\u005B] / [\u005D-\u007E] / nonAscii
escaped <- escape escapeSeqChar

escape <- '\u005C'
escapeSeqChar <- [\u0022\u005C\u0062\u0066\u006E\u0072\u0074]
	      / '\u0075' HEXDIG HEXDIG HEXDIG HEXDIG
	      / '\u0055' HEXDIG HEXDIG HEXDIG HEXDIG HEXDIG HEXDIG HEXDIG HEXDIG

## Multiline Basic String

mlBasicString <- mlBasicStringDelim newline? mlBasicBody mlBasicStringDelim
mlBasicStringDelim <- quotationMark quotationMark quotationMark
mlBasicBody <- mlbContent* ( mlbQuotes mlbContent+ )* mlbQuotes?

mlbContent <- mlbChar / newline / mlbEscapedNl
mlbChar <- mlbUnescaped / escaped
mlbQuotes <- quotationMark quotationMark / quotationMark
mlbUnescaped <- wschar / '\u0021' / [\u0023-\u005B] / [\u005D-\u007E] / nonAscii
mlbEscapedNl <- escape ws newline ( wschar / newline )*

## Literal String

literalString <- apostrophe literalChar* apostrophe

apostrophe <- '\u0027'

literalChar <- '\u0009' / [\u0020-\u0026] / [\u0028-\u007E] / nonAscii

## Multiline Literal String

mlLiteralString <- mlLiteralStringDelim newline? mlLiteralBody
                  mlLiteralStringDelim
mlLiteralStringDelim <- apostrophe apostrophe apostrophe
mlLiteralBody <- mllContent* ( mllQuotes mllContent+ )* mllQuotes?

mllContent <- mllChar / newline
mllChar <- '\u0009' / [\u0020-\u0026] / [\u0028-\u007E] / nonAscii
mllQuotes <- apostrophe apostrophe / apostrophe

## Integer

integer <- decInt / hexInt / octInt / binInt

minus <- '\u002D'
plus <- '\u002B'
underscore <- '\u005F'
digit1_9 <- [\u0031-\u0039]
digit0_7 <- [\u0030-\u0037]
digit0_1 <- [\u0030-\u0031]

hexPrefix <- '\u0030' '\u0078'
octPrefix <- '\u0030' '\u006F'
binPrefix <- '\u0030' '\u0062'

decInt <- ( minus / plus )? unsignedDecInt
# the order of elements is arranged for peg'ify.
unsignedDecInt <- digit1_9 ( DIGIT / underscore DIGIT )+ / DIGIT

hexInt <- hexPrefix HEXDIG ( HEXDIG / underscore HEXDIG )*
octInt <- octPrefix digit0_7 ( digit0_7 / underscore digit0_7 )*
binInt <- binPrefix digit0_1 ( digit0_1 / underscore digit0_1 )*

## Float

float <- floatIntPart ( exp / frac exp? ) / specialFloat

floatIntPart <- decInt
frac <- decimalPoint zeroPrefixableInt
decimalPoint <- '\u002E'
zeroPrefixableInt <- DIGIT ( DIGIT / underscore DIGIT )*

exp <- [eE] floatExpPart
floatExpPart <- ( minus / plus )? zeroPrefixableInt

specialFloat <- ( minus / plus )? ( inf / nan )
inf <- '\u0069' '\u006e' '\u0066'
nan <- '\u006e' '\u0061' '\u006e'

## Boolean

boolean <- true / false

true    <- '\u0074' '\u0072' '\u0075' '\u0065'
false   <- '\u0066' '\u0061' '\u006C' '\u0073' '\u0065'

## Date and Time (as defined in RFC 3339)

dateTime      <- offsetDateTime / localDateTime / localDate / localTime

dateFullyear  <- DIGIT DIGIT DIGIT DIGIT
dateMonth     <- DIGIT DIGIT
dateMday      <- DIGIT DIGIT
timeDelim     <- [tT] / '\u0020'
timeHour      <- DIGIT DIGIT
timeMinute    <- DIGIT DIGIT
timeSecond    <- DIGIT DIGIT
timeSecfrac   <- "." DIGIT+
timeNumoffset <- ( "+" / "-" ) timeHour ":" timeMinute
timeOffset    <- [zZ] / timeNumoffset

partialTime   <- timeHour ":" timeMinute ":" timeSecond timeSecfrac?
fullDate      <- dateFullyear "-" dateMonth "-" dateMday
fullTime      <- partialTime timeOffset

## Offset Date-Time

offsetDateTime <- fullDate timeDelim fullTime

## Local Date-Time

localDateTime <- fullDate timeDelim partialTime

## Local Date

localDate <- fullDate

## Local Time

localTime <- partialTime

## Array

array <- arrayOpen arrayValues? wsCommentNewline arrayClose

arrayOpen <-  '\u005B'
arrayClose <- '\u005D'

arrayValues <-  wsCommentNewline val wsCommentNewline arraySep arrayValues
               / wsCommentNewline val wsCommentNewline arraySep*

arraySep <- '\u002C'

wsCommentNewline <- ( wschar / comment? newline )*

## Table

table <- stdTable / arrayTable

## Standard Table

stdTable <- stdTableOpen {tableKeyStart(auxil, false, $0s);} key {tableKeyEnd(auxil);} stdTableClose

stdTableOpen  <- '\u005B' ws
stdTableClose <- ws '\u005D'

## Inline Table

inlineTable <- inlineTableOpen inlineTableKeyvals? inlineTableClose

inlineTableOpen  <- '\u007B' ws
inlineTableClose <- ws '\u007D'
inlineTableSep   <- ws '\u002C' ws

inlineTableKeyvals <- keyval ( inlineTableSep inlineTableKeyvals )?

## Array Table

arrayTable <- arrayTableOpen {tableKeyStart(auxil, true, $0s);} key {tableKeyEnd(auxil);} arrayTableClose

arrayTableOpen  <- '\u005B' '\u005B' ws
arrayTableClose <- ws '\u005D' '\u005D'

## Built-in ABNF terms, reproduced here for clarity

ALPHA <- [\u0041-\u005A] / [\u0061-\u007A]
DIGIT <- [\u0030-\u0039]
HEXDIG <- DIGIT / [aA] / [bB] / [cC] / [dD] / [eE] / [fF]

%%
#include "toml_post.h"
