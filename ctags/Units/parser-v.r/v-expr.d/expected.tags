test_exprs	input.v	/^fn test_exprs() {$/;"	f	line:2	typeref:typename:	signature:()	roles:def	end:89
a	input.v	/^    a := 0$/;"	v	line:3	fn:test_exprs	roles:def
b	input.v	/^    b := 0$/;"	v	line:5	fn:test_exprs	roles:def
c	input.v	/^    c := 0$/;"	v	line:7	fn:test_exprs	roles:def
d	input.v	/^    d := 0$/;"	v	line:9	fn:test_exprs	roles:def
e	input.v	/^    e := 0$/;"	v	line:11	fn:test_exprs	roles:def
f	input.v	/^    f := 0$/;"	v	line:13	fn:test_exprs	roles:def
g	input.v	/^    g := 0$/;"	v	line:15	fn:test_exprs	roles:def
h	input.v	/^    h := 0$/;"	v	line:18	fn:test_exprs	roles:def
i	input.v	/^    i := 0$/;"	v	line:20	fn:test_exprs	roles:def
j	input.v	/^    j := 0$/;"	v	line:22	fn:test_exprs	roles:def
k	input.v	/^    k := 0$/;"	v	line:24	fn:test_exprs	roles:def
l	input.v	/^    l := 0$/;"	v	line:26	fn:test_exprs	roles:def
m	input.v	/^    m := 0$/;"	v	line:28	fn:test_exprs	roles:def
n	input.v	/^    n := 0$/;"	v	line:30	fn:test_exprs	roles:def
o	input.v	/^    o := 0$/;"	v	line:32	fn:test_exprs	roles:def
p	input.v	/^    p := 0$/;"	v	line:34	fn:test_exprs	roles:def
q	input.v	/^    q := 0$/;"	v	line:36	fn:test_exprs	roles:def
r	input.v	/^    r := 0$/;"	v	line:38	fn:test_exprs	roles:def
s	input.v	/^    s := 0$/;"	v	line:40	fn:test_exprs	roles:def
t	input.v	/^    t := 0$/;"	v	line:43	fn:test_exprs	roles:def
u	input.v	/^    u := 0$/;"	v	line:45	fn:test_exprs	roles:def
v	input.v	/^    v := 0$/;"	v	line:47	fn:test_exprs	roles:def
w	input.v	/^    w := 0$/;"	v	line:49	fn:test_exprs	roles:def
y	input.v	/^    y := 0$/;"	v	line:51	fn:test_exprs	roles:def
z	input.v	/^    z := 0$/;"	v	line:53	fn:test_exprs	roles:def
aa	input.v	/^    aa := 0$/;"	v	line:55	fn:test_exprs	roles:def
ab	input.v	/^    ab := 0$/;"	v	line:58	fn:test_exprs	roles:def
ac	input.v	/^    ac := 0$/;"	v	line:60	fn:test_exprs	roles:def
ad	input.v	/^    ad := 0$/;"	v	line:62	fn:test_exprs	roles:def
ae	input.v	/^    ae := 0$/;"	v	line:65	fn:test_exprs	roles:def
af	input.v	/^    af := 0$/;"	v	line:67	fn:test_exprs	roles:def
ag	input.v	/^    ag := 0$/;"	v	line:69	fn:test_exprs	roles:def
ah	input.v	/^    ah := 0$/;"	v	line:71	fn:test_exprs	roles:def
ai	input.v	/^    ai := 0$/;"	v	line:73	fn:test_exprs	roles:def
aj	input.v	/^    aj := 0$/;"	v	line:75	fn:test_exprs	roles:def
ak	input.v	/^    ak := 0$/;"	v	line:78	fn:test_exprs	roles:def
al	input.v	/^    al := 0$/;"	v	line:80	fn:test_exprs	roles:def
am	input.v	/^    am := 0$/;"	v	line:82	fn:test_exprs	roles:def
an	input.v	/^    an := 0$/;"	v	line:84	fn:test_exprs	roles:def
ao	input.v	/^    ao := 0$/;"	v	line:86	fn:test_exprs	roles:def
ap	input.v	/^    ap := 0$/;"	v	line:88	fn:test_exprs	roles:def
test_exprs	input-1.v	/^fn test_exprs() {$/;"	f	line:2	typeref:typename:	signature:()	roles:def	end:44
a	input-1.v	/^    a := x + x + x$/;"	v	line:3	fn:test_exprs	roles:def
b	input-1.v	/^    b := x - x - x$/;"	v	line:4	fn:test_exprs	roles:def
c	input-1.v	/^    c := x * x * x$/;"	v	line:5	fn:test_exprs	roles:def
d	input-1.v	/^    d := x \/ x \/ x$/;"	v	line:6	fn:test_exprs	roles:def
e	input-1.v	/^    e := x % x % x$/;"	v	line:7	fn:test_exprs	roles:def
f	input-1.v	/^    f := x ^ x$/;"	v	line:8	fn:test_exprs	roles:def
g	input-1.v	/^    g := x += x$/;"	v	line:10	fn:test_exprs	roles:def
h	input-1.v	/^    h := x -= x$/;"	v	line:11	fn:test_exprs	roles:def
i	input-1.v	/^    i := x \/= x$/;"	v	line:12	fn:test_exprs	roles:def
j	input-1.v	/^    j := x *= x$/;"	v	line:13	fn:test_exprs	roles:def
k	input-1.v	/^    k := x %= x$/;"	v	line:14	fn:test_exprs	roles:def
l	input-1.v	/^    l := x <<= x$/;"	v	line:15	fn:test_exprs	roles:def
m	input-1.v	/^    m := x >>= x$/;"	v	line:16	fn:test_exprs	roles:def
n	input-1.v	/^    n := x >>>= x$/;"	v	line:17	fn:test_exprs	roles:def
o	input-1.v	/^    o := x &= x$/;"	v	line:18	fn:test_exprs	roles:def
p	input-1.v	/^    p := x |= x$/;"	v	line:19	fn:test_exprs	roles:def
q	input-1.v	/^    q := x ^= x$/;"	v	line:20	fn:test_exprs	roles:def
r	input-1.v	/^    r := 0$/;"	v	line:21	fn:test_exprs	roles:def
s	input-1.v	/^    s := ~x$/;"	v	line:23	fn:test_exprs	roles:def
t	input-1.v	/^    t := x & x$/;"	v	line:24	fn:test_exprs	roles:def
u	input-1.v	/^    u := x | x$/;"	v	line:25	fn:test_exprs	roles:def
v	input-1.v	/^    v := x ^ x$/;"	v	line:26	fn:test_exprs	roles:def
w	input-1.v	/^    w := x << x$/;"	v	line:27	fn:test_exprs	roles:def
y	input-1.v	/^    y := x >> x$/;"	v	line:28	fn:test_exprs	roles:def
z	input-1.v	/^    z := x >>> x$/;"	v	line:29	fn:test_exprs	roles:def
aa	input-1.v	/^    aa := !x$/;"	v	line:31	fn:test_exprs	roles:def
ab	input-1.v	/^    ab := x || x$/;"	v	line:32	fn:test_exprs	roles:def
ac	input-1.v	/^    ac := x && x$/;"	v	line:33	fn:test_exprs	roles:def
ad	input-1.v	/^    ad := x == x$/;"	v	line:35	fn:test_exprs	roles:def
ae	input-1.v	/^    ae := x != x$/;"	v	line:36	fn:test_exprs	roles:def
af	input-1.v	/^    af := x < x$/;"	v	line:37	fn:test_exprs	roles:def
ag	input-1.v	/^    ag := x > x$/;"	v	line:38	fn:test_exprs	roles:def
ah	input-1.v	/^    ah := x <= x$/;"	v	line:39	fn:test_exprs	roles:def
ai	input-1.v	/^    ai := x >= x$/;"	v	line:40	fn:test_exprs	roles:def
aj	input-1.v	/^    aj := x++ - 3$/;"	v	line:42	fn:test_exprs	roles:def
ak	input-1.v	/^    ak := x-- + 3$/;"	v	line:43	fn:test_exprs	roles:def
main	input-2.v	/^fn main () {$/;"	f	line:1	typeref:typename:	signature:()	roles:def	end:11
a	input-2.v	/^    a := 0$/;"	v	line:2	fn:main	roles:def
b	input-2.v	/^    mut b := 0$/;"	v	line:3	fn:main	access:mut	roles:def
c	input-2.v	/^    mut c, d := foo()$/;"	v	line:4	fn:main	access:mut	roles:def
d	input-2.v	/^    mut c, d := foo()$/;"	v	line:4	fn:main	roles:def
e	input-2.v	/^    e, mut f := foo()$/;"	v	line:5	fn:main	roles:def
f	input-2.v	/^    e, mut f := foo()$/;"	v	line:5	fn:main	access:mut	roles:def
g	input-2.v	/^    g, h, i, mut j, k := x, x, x, x, x$/;"	v	line:8	fn:main	roles:def
h	input-2.v	/^    g, h, i, mut j, k := x, x, x, x, x$/;"	v	line:8	fn:main	roles:def
i	input-2.v	/^    g, h, i, mut j, k := x, x, x, x, x$/;"	v	line:8	fn:main	roles:def
j	input-2.v	/^    g, h, i, mut j, k := x, x, x, x, x$/;"	v	line:8	fn:main	access:mut	roles:def
k	input-2.v	/^    g, h, i, mut j, k := x, x, x, x, x$/;"	v	line:8	fn:main	roles:def
m	input-2.v	/^    m := chan int{cap: 1}$/;"	v	line:10	fn:main	roles:def
foo	input-2.v	/^fn foo(ch chan int) {$/;"	f	line:13	typeref:typename:	signature:(ch chan int)	roles:def	end:18
n	input-2.v	/^    n := <-ch or {$/;"	v	line:15	fn:foo	roles:def
