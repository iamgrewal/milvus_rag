B_ENVIRONMENT	input.l	/^%x B_ENVIRONMENT E_ENVIRONMENT VERBATIM INCLUDE MATH COMMENT VERB DEF$/;"	c	language:LEX	roles:def
E_ENVIRONMENT	input.l	/^%x B_ENVIRONMENT E_ENVIRONMENT VERBATIM INCLUDE MATH COMMENT VERB DEF$/;"	c	language:LEX	roles:def
VERBATIM	input.l	/^%x B_ENVIRONMENT E_ENVIRONMENT VERBATIM INCLUDE MATH COMMENT VERB DEF$/;"	c	language:LEX	roles:def
INCLUDE	input.l	/^%x B_ENVIRONMENT E_ENVIRONMENT VERBATIM INCLUDE MATH COMMENT VERB DEF$/;"	c	language:LEX	roles:def
MATH	input.l	/^%x B_ENVIRONMENT E_ENVIRONMENT VERBATIM INCLUDE MATH COMMENT VERB DEF$/;"	c	language:LEX	roles:def
COMMENT	input.l	/^%x B_ENVIRONMENT E_ENVIRONMENT VERBATIM INCLUDE MATH COMMENT VERB DEF$/;"	c	language:LEX	roles:def
VERB	input.l	/^%x B_ENVIRONMENT E_ENVIRONMENT VERBATIM INCLUDE MATH COMMENT VERB DEF$/;"	c	language:LEX	roles:def
DEF	input.l	/^%x B_ENVIRONMENT E_ENVIRONMENT VERBATIM INCLUDE MATH COMMENT VERB DEF$/;"	c	language:LEX	roles:def
AFTER_DISPLAY	input.l	/^%x AFTER_DISPLAY ENV_DEF ICOR GETICOR$/;"	c	language:LEX	roles:def
ENV_DEF	input.l	/^%x AFTER_DISPLAY ENV_DEF ICOR GETICOR$/;"	c	language:LEX	roles:def
ICOR	input.l	/^%x AFTER_DISPLAY ENV_DEF ICOR GETICOR$/;"	c	language:LEX	roles:def
GETICOR	input.l	/^%x AFTER_DISPLAY ENV_DEF ICOR GETICOR$/;"	c	language:LEX	roles:def
START	input.l	/^%s START$/;"	c	language:LEX	roles:def
b_group	input.l	/^b_group ("{"|\\\\bgroup)$/;"	r	language:LEX	roles:def
e_group	input.l	/^e_group ("}"|\\\\egroup)$/;"	r	language:LEX	roles:def
b_math	input.l	/^b_math \\\\\\($/;"	r	language:LEX	roles:def
e_math	input.l	/^e_math \\\\\\)$/;"	r	language:LEX	roles:def
math	input.l	/^math \\\$$/;"	r	language:LEX	roles:def
b_display	input.l	/^b_display \\\\\\[$/;"	r	language:LEX	roles:def
e_display	input.l	/^e_display \\\\\\]$/;"	r	language:LEX	roles:def
display	input.l	/^display \\$\\\$$/;"	r	language:LEX	roles:def
par	input.l	/^par ([ \\t]*\\n[ \\t]*\\n[ \\t\\n]*)$/;"	r	language:LEX	roles:def
non_par_ws	input.l	/^non_par_ws ([ \\t]+\\n?[ \\t]*|[ \\t]*\\n[ \\t]*|[ \\t]*\\n?[ \\t]+)$/;"	r	language:LEX	roles:def
ws	input.l	/^ws [ \\n\\t](%[^\\n]\\n)*$/;"	r	language:LEX	roles:def
space	input.l	/^space ({ws}|\\~|\\\\space)$/;"	r	language:LEX	roles:def
hard_space	input.l	/^hard_space (\\~|\\\\space)$/;"	r	language:LEX	roles:def
u_letter	input.l	/^u_letter [A-ZÆØÅ] $/;"	r	language:LEX	roles:def
l_letter	input.l	/^l_letter [a-zæøå] $/;"	r	language:LEX	roles:def
punct	input.l	/^punct [\\!\\.\\?]$/;"	r	language:LEX	roles:def
atoz	input.l	/^atoz [a-zA-Z]$/;"	r	language:LEX	roles:def
letter	input.l	/^letter [A-ZÆØÅa-zæøå]$/;"	r	language:LEX	roles:def
c_bin	input.l	/^c_bin ("-"|"+"|"\\\\cdot"|"\\\\oplus"|"\\\\otimes"|"\\\\times")$/;"	r	language:LEX	roles:def
l_bin	input.l	/^l_bin (",")$/;"	r	language:LEX	roles:def
general_abbrev	input.l	/^general_abbrev {letter}+{punct}$/;"	r	language:LEX	roles:def
non_abbrev	input.l	/^non_abbrev {u_letter}{u_letter}+{punct}$/;"	r	language:LEX	roles:def
italic_spec	input.l	/^italic_spec (sl|it)$/;"	r	language:LEX	roles:def
normal_spec	input.l	/^normal_spec normalshape$/;"	r	language:LEX	roles:def
swap_spec	input.l	/^swap_spec em$/;"	r	language:LEX	roles:def
font_spec	input.l	/^font_spec (rm|bf|{italic_spec}|tt|{swap_spec}|mediumseries|{normal_spec})$/;"	r	language:LEX	roles:def
primitive	input.l	/^primitive \\\\(above|advance|catcode|chardef|closein|closeout|copy|count|countdef|cr|crcr|csname/;"	r	language:LEX	roles:def
symbol	input.l	/^symbol ("$"("\\\\"{atoz}+|.)"$"|"\\\\#"|"\\\\$"|"\\\\%"|"\\\\ref")$/;"	r	language:LEX	roles:def
B_ENVIRONMENT	input.l	/^<B_ENVIRONMENT> {$/;"	c	language:LEX	roles:grouping
stdio.h	input.l	/^#include <stdio.h>/;"	h	language:C	roles:system
string.h	input.l	/^#include <string.h>/;"	h	language:C	roles:system
win32lib.h	input.l	/^#include <win32lib.h>/;"	h	language:C	roles:system
YY_SKIP_YYWRAP	input.l	/^#define YY_SKIP_YYWRAP$/;"	d	language:C	file:	roles:def
yywrap	input.l	/^int yywrap() { return 1; }$/;"	f	language:C	typeref:typename:int	roles:def
GROUP_STACK_SIZE	input.l	/^#define GROUP_STACK_SIZE /;"	d	language:C	file:	roles:def
INPUT_STACK_SIZE	input.l	/^#define INPUT_STACK_SIZE /;"	d	language:C	file:	roles:def
PROGNAME	input.l	/^#define PROGNAME /;"	d	language:C	file:	roles:def
CG_NAME	input.l	/^#define CG_NAME /;"	d	language:C	file:	roles:def
CG_TYPE	input.l	/^#define CG_TYPE /;"	d	language:C	file:	roles:def
CG_LINE	input.l	/^#define CG_LINE /;"	d	language:C	file:	roles:def
CG_ITALIC	input.l	/^#define CG_ITALIC /;"	d	language:C	file:	roles:def
CG_FILE	input.l	/^#define CG_FILE /;"	d	language:C	file:	roles:def
returnval	input.l	/^char returnval[100];$/;"	v	language:C	typeref:typename:char[100]	roles:def
line_count	input.l	/^int line_count = 1;$/;"	v	language:C	typeref:typename:int	roles:def
warn_count	input.l	/^int warn_count = 0;$/;"	v	language:C	typeref:typename:int	roles:def
file_name	input.l	/^char *file_name;$/;"	v	language:C	typeref:typename:char *	roles:def
verb_char	input.l	/^char verb_char;$/;"	v	language:C	typeref:typename:char	roles:def
tex_group	input.l	/^typedef struct tex_group $/;"	s	language:C	file:	roles:def
s_name	input.l	/^    unsigned char *s_name;$/;"	m	language:C	struct:tex_group	typeref:typename:unsigned char *	file:	roles:def
s_type	input.l	/^    int s_type;$/;"	m	language:C	struct:tex_group	typeref:typename:int	file:	roles:def
s_line	input.l	/^    int s_line;$/;"	m	language:C	struct:tex_group	typeref:typename:int	file:	roles:def
italic	input.l	/^    int italic;$/;"	m	language:C	struct:tex_group	typeref:typename:int	file:	roles:def
s_file	input.l	/^    char *s_file; $/;"	m	language:C	struct:tex_group	typeref:typename:char *	file:	roles:def
tex_group	input.l	/^ } tex_group;$/;"	t	language:C	typeref:struct:tex_group	file:	roles:def
gstack	input.l	/^tex_group *gstack;$/;"	v	language:C	typeref:typename:tex_group *	roles:def
gstack_size	input.l	/^int gstack_size = GROUP_STACK_SIZE;$/;"	v	language:C	typeref:typename:int	roles:def
gstackp	input.l	/^int gstackp = 0;$/;"	v	language:C	typeref:typename:int	roles:def
input_	input.l	/^typedef struct input_ $/;"	s	language:C	file:	roles:def
stream	input.l	/^    YY_BUFFER_STATE stream;$/;"	m	language:C	struct:input_	typeref:typename:YY_BUFFER_STATE	file:	roles:def
name	input.l	/^    char *name;$/;"	m	language:C	struct:input_	typeref:typename:char *	file:	roles:def
linenum	input.l	/^    int linenum;$/;"	m	language:C	struct:input_	typeref:typename:int	file:	roles:def
input_	input.l	/^ } input_;$/;"	t	language:C	typeref:struct:input_	file:	roles:def
istack	input.l	/^input_ *istack;$/;"	v	language:C	typeref:typename:input_ *	roles:def
istack_size	input.l	/^int istack_size = INPUT_STACK_SIZE;$/;"	v	language:C	typeref:typename:int	roles:def
istackp	input.l	/^int istackp = 0;$/;"	v	language:C	typeref:typename:int	roles:def
def_count	input.l	/^int def_count = 0;$/;"	v	language:C	typeref:typename:int	roles:def
main	input.l	/^int main( argc, argv )$/;"	f	language:C	roles:def
strstr	input.l	/^strstr(string, substring)$/;"	f	language:C	roles:def
push	input.l	/^void push(p_name, p_type, p_line)$/;"	f	language:C	roles:def
input_file	input.l	/^void input_file(file_nam)$/;"	f	language:C	roles:def
pop	input.l	/^void pop()$/;"	f	language:C	typeref:typename:void	roles:def
bg_command	input.l	/^char *bg_command(name)$/;"	f	language:C	roles:def
eg_command	input.l	/^char *eg_command(name,type)$/;"	f	language:C	roles:def
g_checkend	input.l	/^void g_checkend(n)$/;"	f	language:C	roles:def
e_checkend	input.l	/^void e_checkend(n, name)$/;"	f	language:C	roles:def
f_checkend	input.l	/^void f_checkend(name)$/;"	f	language:C	roles:def
print_bad_match	input.l	/^void print_bad_match(end_command,type)$/;"	f	language:C	roles:def
check_top_level_end	input.l	/^int check_top_level_end(end_command,type)$/;"	f	language:C	roles:def
linecount	input.l	/^void linecount()$/;"	f	language:C	typeref:typename:void	roles:def
