name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.9"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      milvus:
        image: milvusdb/milvus:v2.3.0
        ports:
          - 19530:19530
        options: >-
          --health-cmd="curl -f http://localhost:9091/healthz || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      
      neo4j:
        image: neo4j:5.15-community
        ports:
          - 7687:7687
          - 7474:7474
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd="cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install UV and dependencies
      run: |
        pip install uv
        uv pip install --system -r requirements.txt
        if [ -f dev-requirements.txt ]; then
          uv pip install --system -r dev-requirements.txt
        fi

    - name: Wait for services
      run: |
        echo "Waiting for Milvus..."
        timeout 60 bash -c 'until curl -f http://localhost:19530/health 2>/dev/null; do sleep 2; done' || echo "Milvus not ready"
        echo "Waiting for Neo4j..."
        timeout 60 bash -c 'until echo "RETURN 1" | cypher-shell -u neo4j -p testpassword 2>/dev/null; do sleep 2; done' || echo "Neo4j not ready"

    - name: Lint with ruff
      run: |
        ruff check src/ tests/ --format=github || true
        ruff format --check src/ tests/ || true

    - name: Type check with mypy
      run: mypy src/graphrag --ignore-missing-imports || true

    - name: Run tests with coverage
      env:
        MILVUS_HOST: localhost
        MILVUS_PORT: 19530
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
      run: |
        pytest tests/ \
          --cov=src/graphrag \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --maxfail=5 \
          -v || true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        files: ./coverage.xml
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          .coverage
